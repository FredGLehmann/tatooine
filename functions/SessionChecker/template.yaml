AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM configuration for Lambda@Edge SessionChecker (cloudFront and lambda)

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - staging
      - production
    Default: staging
    Description: Stage that can be added to resource names

Mappings:
  StageMap:
    staging:
      name: "labs"
      alias: "tatooinelabs.zoubix.net"
      originid:
      webbucketname: "tatooinelabs-web"
      certarn: "arn:aws:acm:us-east-1:894260024467:certificate/31a4ebd7-d79e-4774-a029-4b4a4523f7b8"
      sessiontable: "test-congitoSessionManager-SessionTable-13N11D33S9561"
      sessiontableregion: "eu-west-3"
      cookiename: "Barrier"
      loginurl: "https://d1w77mu32577ph.cloudfront.net/_identity/login"
    production:
      name: "prod"
      alias: "tatooine.zoubix.net"
      originid:
      webbucketname: "tatooine-web"
      certarn:

Resources:
    # SessionChecker
  SessionCheckerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
      Role: !GetAtt SessionCheckerFunctionRole.Arn
      Runtime: python3.7
      Handler: handler.handler
      Timeout: 3
      MemorySize: 128
      AutoPublishAlias: live
      Environment:
        Variables:
          SESSION_TABLE:
            Ref: sessiontable
          SESSION_TABLE_REGION:
            Ref: sessiontableregion
          COOKIE_NAME:
            Ref: cookiename
          LOGIN_URL:
            Ref: loginurl


  SessionCheckerFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/"
        ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "edgelambda.amazonaws.com"

  #
  # Origin access identity creation
  myoriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: tatooine Origin Access Identity


  # S3 Web Bucket creation (the one where website files are hosted)
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [StageMap, !Ref Stage, webbucketname]
      Tags:
        - Key: AppName
          Value: tatooine
        - Key: Env
          Value: !Ref Stage

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: WebBucket
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt WebBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref myoriginAccessIdentity

  #
  # CloudFront Distribution
  WebDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
        - Key: AppName
          Value: tatooine
        - Key: Env
          Value: Ref Stage
      DistributionConfig:
        Aliases:
          - !Ref website
        ViewerCertificate:
          AcmCertificateArn: !Ref certarn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
        Enabled: 'true'
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /error.html
            ResponseCode: 403
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 404
        PriceClass: PriceClass_All
        Origins:
          - DomainName: !Sub
              - ${webBucket}.s3.amazonaws.com
              - webBucket: !Ref webBucket
            Id: S3-WebBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref myoriginAccessIdentity
        DefaultCacheBehavior:
          TargetOriginId: S3-WebBucket
          TrustedSigners:
          - self
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: redirect-to-https

Outputs:
    SessionCheckerFunctionVersion:
      Description: Lambda@Edge Sample Function ARN with Version
      Value: !Ref LambdaEdgeFunctionSample.Version
