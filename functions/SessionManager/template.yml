AWSTemplateFormatVersion: 2010-09-09
Description: |
  The SessionManager of the CogCF Barrier.
  This stack must be created before the SessionChecker.

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - staging
      - production
    Default: staging
    Description: Stage that can be added to resource names

Mappings:
  StageMap:
    staging:
      UserPoolDomainName: "tatooinelabs-auth.zoubix.net"
      UserPoolDomainNameCertArn:
      CloudfrontDomainName: "tatooinelabs.zoubix.net"
      CookieName: tatooinelabszbx
    production:
      UserPoolDomainName: "tatooine-auth.zoubix.net"
      UserPoolDomainNameCertArn:
      CloudfrontDomainName: "tatooine.zoubix.net"
      CookieName: tatooinezbx

Parameters:
  WriteAttributes:
    Type: CommaDelimitedList
  SupportedIdentityProviders:
    Type: CommaDelimitedList
  ReadAttributes:
    Type: CommaDelimitedList
  CloudfrontDomainName:
    Type: String


Resources:
#
# COGNITO User Pool
  MyCognitoUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Ref platform
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: verified_email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          RequireNumbers: true
          RequireLowercase: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
          MinimumLength: 8
      UserPoolTags:
        AppName: tatooine
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: true

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      Domain: !Ref UserPoolDomainName
      CustomDomainConfig:
        CertificateArn: !Ref UserPoolDomainNameCertArn

  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      WriteAttributes: !Ref WriteAttributes
      GenerateSecret: false
      AllowedOAuthScopes:
        - openid
        - profile
      UserPoolId: !Ref MyCognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      LogoutURLs:
        - !Sub 'https://${CloudfrontDomainName}/_identity/logout'
      AllowedOAuthFlows:
        - code
      CallbackURLs:
        - !Sub 'https://${CloudfrontDomainName}/_identity/auth'
      ReadAttributes: !Ref ReadAttributes
      SupportedIdentityProviders: !Ref SupportedIdentityProviders
      DefaultRedirectURI: !Sub 'https://${CloudfrontDomainName}/_identity/auth'

  #
  # API Gateway
  CognitoSessionApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          /_identity/login:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoSessionFunctionAliaslive}/invocations
              responses: {}
          /_identity/logout:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoSessionFunctionAliaslive}/invocations
              responses: {}
          /_identity/auth:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoSessionFunctionAliaslive}/invocations
              responses: {}
        swagger: '2.0'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Parameters:
        endpointConfigurationTypes: REGIONAL

  CognitoSessionApiDeploymentc0490b2688:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref CognitoSessionApi
      Description: 'RestApi deployment id: c0490b26886ff6c17f2879f43a8eb39007031b77'
      StageName: Stage

  #
  # DYNAMO DB
  SessionTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      KeySchema:
        - KeyType: HASH
          AttributeName: session_id
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: valid_until
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  SessionTableReadPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'dynamodb:GetItem'
            Resource:
              - !GetAtt
                - SessionTable
                - Arn
            Effect: Allow
            Sid: ddb

  CognitoSessionFunctionlogoutPermissionprod:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref CognitoSessionFunctionAliaslive
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/_identity/logout
        - __Stage__: '*'
          __ApiId__: !Ref CognitoSessionApi

  CognitoSessionFunctionloginPermissionprod:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref CognitoSessionFunctionAliaslive
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/_identity/login
        - __Stage__: '*'
          __ApiId__: !Ref CognitoSessionApi

  CognitoSessionFunctionAliaslive:
    Type: 'AWS::Lambda::Alias'
    Properties:
      FunctionVersion: !GetAtt
        - CognitoSessionFunctionVersion8b20e8453a
        - Version
      FunctionName: !Ref CognitoSessionFunction
      Name: live

  CognitoSessionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Ref SessionTableReadWritePolicy
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'

  CognitoSessionFunctionVersion8b20e8453a:
    DeletionPolicy: Retain
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref CognitoSessionFunction

  CognitoSessionApiprodStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref CognitoSessionApiDeploymentc0490b2688
      RestApiId: !Ref CognitoSessionApi
      MethodSettings:
        - HttpMethod: '*'
          ResourcePath: /*
          LoggingLevel: ERROR
      StageName: prod

  CognitoSessionFunctionauthPermissionprod:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref CognitoSessionFunctionAliaslive
      SourceArn: !Sub
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/_identity/auth
        - __Stage__: '*'
          __ApiId__: !Ref CognitoSessionApi

  SessionTableReadWritePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'dynamodb:DeleteItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
            Resource:
              - !GetAtt
                - SessionTable
                - Arn
            Effect: Allow
            Sid: ddb

  CognitoSessionFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: tatooinelabs-web
        S3Key: Barrier/c047d24d62bf2eb5b89abcc27c41ee77
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 256
      Environment:
        Variables:
          USER_POOL_DOMAIN: !Ref UserPoolDomainName
          COOKIE_NAME: !Ref CookieName
          SESSION_TABLE: !Ref SessionTable
          CLOUDFRONT_DOMAIN: !Ref CloudfrontDomainName
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Handler: handler.handler
      Role: !GetAtt
        - CognitoSessionFunctionRole
        - Arn
      Timeout: 60
      Runtime: python3.7


    Outputs:
      ApiId:
        Export:
          Name: !Sub '${AWS::StackName}-ApiId'
        Value: !Ref CognitoSessionApi
      SessionTableReadWritePolicyArn:
        Export:
          Name: !Sub '${AWS::StackName}-SessionTableReadWritePolicyArn'
        Value: !Ref SessionTableReadWritePolicy
      SessionTableReadPolicyArn:
        Export:
          Name: !Sub '${AWS::StackName}-SessionTableReadPolicyArn'
        Value: !Ref SessionTableReadPolicy
      SessionTable:
        Export:
          Name: !Sub '${AWS::StackName}-SessionTable'
        Value: !Ref SessionTable
      CookieName:
        Export:
          Name: !Sub '${AWS::StackName}-CookieName'
        Value: !Ref CookieName
      ApiDomainName:
        Export:
          Name: !Sub '${AWS::StackName}-ApiDomainName'
        Value: !Sub '${CognitoSessionApi}.execute-api.${AWS::Region}.amazonaws.com'
      SessionTableArn:
        Export:
          Name: !Sub '${AWS::StackName}-SessionTableArn'
        Value: !GetAtt
          - SessionTable
          - Arn
      LoginUrl:
        Export:
          Name: !Sub '${AWS::StackName}-LoginUrl'
        Value: !Sub 'https://${CloudfrontDomainName}/_identity/login'
      ApiPath:
        Export:
          Name: !Sub '${AWS::StackName}-ApiPath'
        Value: /prod
      SessionTableRegion:
        Export:
          Name: !Sub '${AWS::StackName}-SessionTableRegion'
        Value: !Ref 'AWS::Region'
