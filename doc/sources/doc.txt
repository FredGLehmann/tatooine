= Tatooine documentation

== Déploiement

  . Action 1 : déployer l'infra de base via le template tatooine-infra.yaml :
    ** déploiement ds n'importe quelle région
    ** déploiement des briques suivantes :
      *** buckets s3
      *** CloudFront
      *** CognitoUserPool

  . Action 2 : déployer session Manager via sam :
    ** déploiement ds n'importe quelle région
    ** mettre à jour le template CF avec les infos de la distrib CloudFront et du pool cognito
    ** Déploiement des briques suivantes :
      *** DynamoDB table + role iam
      *** API Gateway
      *** fonction Lambda

  . Action 3 : déployer Session checker via SAM :
    ** fonction à déployer en région us-east-1 (c'est une fonction lambda@edge appelé par CloudFront)
    ** mettre à jour le template CF avec la région et le nom de la table DynamoDB, l'URL de gestion des login via API Gateway
    ** Déploiement des briques suivantes :
      *** lambdafunction

  . Action 4 : mettre à jour la distribution CloudFront avec les éléments des 2 lambda ci-dessus :
    ** récupérez des déploiements précédents :
      *** Ajouter une origine pour l'URL de l'api Gateway (SessionManager) :
        **** Create Origin
        **** Origin Domain Name => URL de l'Api Gateway
        **** Origin Path => le path correspondant au stage de déploiement de l'API Gateway
        **** Origin Protocol Policy => HTTPS Only
      *** Ajouter un Behavior :
        **** Create Behavior
        **** Image behavior_api.jpeg
      *** le stage de l'api Gateway
      ***


    ** redirection des prefix /_identity/* vers session manager :
      *** ds la console CloudFront, sélectionnez la distribution crée au point 1
      *** dans l'onglet Origin, créer un nouvel Origin
        **** Origin Domain Name : l'url de l'api Gateway
        **** Origin path : le stage de l'api Gateway
        **** HTTPS only
      *** dans l'onglet Behaviors, créez un nouveau Behavior :
        **** Path Pattern : /_identity/*
        **** Origin : l'origine créez précédemment
        **** Redirect HTTP to HTTPS
        **** Allow method : GET, HEAD
        **** Cache Key and Origin requests : Legacy cache + Customize  + tous les TTL à 0
      *** association lambda@edge/cloudfront
        **** modifiez le behavior par défaut, en lui ajoutant une association lambda de type "Viewer Request", vers l'ARN de notre fonction lambda@edge SessionChecker

    ** redirection vers SessionChecker pour toutes les requêtes à destination du bucket S3 du site web :
      ***

=== Tests
  URL d'accès : https://tatooinelabs.zoubix.net

=== J'en suis ou ??

  * Pré-requis :
    ** certificat -> ok
    ** dns

  * Action 1 :
    ** buckets -> ok
    ** CloudFront -> ok
    ** CognitoUserPool -> ok

  * Action 2 :
    ** dynamo table -> ok (tatooinelabs-session)
    ** api gatreway ->
    ** lambdafunction SessionManager -> ok

  * Action 3 :
    ** lambdafunction SessionChecker -> ok

  * Action 4 :
    ** mise à jour de la distrib CloudFront :
      *** ajouter une Origine pour Session Manager -> ok
      *** ajouter le behavior correspondant à /-identity/ -> ok
      *** association cloudfront/lambda@edge -> ok






=== Bloqué par le problème de lambda@edge pas dispo en région Paris, on change la méthode de déploiement :
  . Action 1 : déployer l'infra de base via le template tatooine-infra.yaml :
    ** déploiement en région Paris (mais potentiellement dans n'importe quelle région)
    ** déploiement des briques suivantes :
      *** buckets s3
      *** CognitoUserPool

  . Action 2 : déployer session Manager via SAM :
    ** déploiement en région Paris
    ** mettre à jour le template CF avec les infos du UserPool Cognito venant de la stack infra
    ** déployer une première fois via SAM
    ** mettre à jour le code de la fonction avec les infos dynamodb que l'on vient de créer
    ** déployer une deuxième fois via SAM
    ** Déploiement des briques suivantes :
      *** DynamoDB table + role iam
      *** API Gateway (non présent dans les ressources du template, mais déployée automatiquement dans la définition de la fonction)
      *** fonction Lambda

  . Action 3 : déployer Session checker via SAM :
    ** fonction à déployer en région us-east-1 (c'est une fonction lambda@edge appelé par CloudFront)
    ** mettre à jour le template CF avec la région et le nom de la table DynamoDB, l'URL de gestion des login via API Gateway
    ** Déploiement des briques suivantes :
      *** lambdafunction
      *** cloudfront

  . Action 4 : corriger la bucket policy du bucket web-bucket pour autoriser CloudFront
    *** ds la console CloudFront, editer l'origin correspondant au bucket
    *** Bucket policy -> "yes update the bucket policy"

  . Action 5 : dns
    *** mettre à jour la zone auth.zoubix.net enregistrement CNAM pour le domaine d'authent Cognito

=== Des infos sur le méchanisme de login

== Pas encore authentifié
  session_checker -> session_manager (/login) -> cognito -> session_manager (/auth) -> session_checker -> bucket s3
  - session_manager (/login) : info de session avant cognito enregistré dans la table de session
    secret (aussi passé en paramètre dans le STATE de l'url)
    path (path demandé initialement par le user) - (aussi passé en paramètre dans le STATE de l'url)
    session_id (aussi enregistré dans le cookie de login)
    valid_until (durée de validité)
    session_id, secret et date de validitée sont enregistrés dans la table de session
  - session_manager (/auth) : vérification des infos après cognito :
    secret1 (issu du STATE de l'url)
    session_id (récupéré du cookie de login)
    valid_until (durée de validité récupéré ds la table de session via le session_id)
    secret2 (récupéré de la table de session via le session_id)
    on compare le secret1 issu du state et le secret 2 issu de la table des sessions et on verifi si la durée de validité est toujours ok
    si c'est bon, on va demander à Cognito l'identité de l'utilisateur
    on enregistre dans la table des sessions : un nouveau session_id, la durée de validité de la session et l'identité utilisateur (issu de Cognito)
    on redirige le navigateur vers le path initialement demandé et en supprimant le cookie de login et en créant un cookie de session (contenant session_id et durée de validité)
  - session_checker :
    on récupère le session_id du cookie de session, seulement si la durée de validité est bonne, sinon on redirige vers le login (session_manager/login)
    si ok, on redirige en modifiant le header pour y inclure le session_id en tant que "x-barrier-session-id"

    ToDo : tester suite à la modif de Session_checker sur le nom de variable ligne 48
